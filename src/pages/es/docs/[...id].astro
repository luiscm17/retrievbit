---
import type { DocsEntry, MenuItem } from "@/types";
import EntryLayout from "@components/docs/EntryLayout.astro";
import CollectionLayout from "@components/docs/CollectionLayout.astro";
import { getEntries, getEntriesInGroup, getGroups } from "@lib/contentParser";
import { sortByTitle } from "@lib/sortFunctions";
import { getCollection as getAstroCollection } from "astro:content";

// Usar "es" directamente ya que estamos en la carpeta /es/docs/
const lang = "es";

export async function getStaticPaths() {
  const entries = (await getEntries("docs", "es", undefined, false, true)) as DocsEntry[];

  const paths = entries.map((entry) => {
    const isGroupPage = entry.id.endsWith("-index");
    const slugParts = entry.id.split("/").slice(2);
    let slug: string | undefined;

    if (isGroupPage) {
      // Si es una página de grupo, el slug es la ruta sin el '-index'
      slug = slugParts.slice(0, -1).join("/") || '';
    } else {
      // Si es una página de contenido, el slug es la ruta completa
      slug = slugParts.join("/");
    }

    return {
      params: { id: slug },
      props: { entry, isGroup: isGroupPage },
    };
  });

  return paths;
}

const { entry, isGroup } = Astro.props;
const segments = entry.id.split("/");
// El nombre del grupo está en el tercer segmento (índice 2) para /es/docs/characters
const groupName = segments[2];

let groupEntries: DocsEntry[] = [];
if (isGroup) {
  groupEntries = (await getEntriesInGroup("docs", "es", groupName, sortByTitle)) as DocsEntry[];
}

// Construir menú del navegador
const browserMenu: MenuItem[] = [];
const groups = (await getGroups("docs", "es", sortByTitle)) as DocsEntry[];

for (const group of groups) {
  const groupSlug = group.id.split("/").pop() || "";

  const currentGroupEntries = (await getEntriesInGroup(
    "docs",
    "es", // Usar la variable lang que ya está definida
    groupSlug,
    sortByTitle,
  )) as DocsEntry[];

  browserMenu.push({
    title: group.data.title,
    id: groupSlug,
    children: currentGroupEntries.map((entry) => ({
      title: entry.data.title,
      id: entry.id.split("/").pop() || "",
      children: [],
    })),
  });
}
---

{
  isGroup ? (
    <CollectionLayout collectionIndex={entry} entries={groupEntries} />
  ) : (
    <EntryLayout entry={entry} browserMenu={browserMenu} />
  )
}
