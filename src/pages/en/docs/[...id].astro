---
import type { DocsEntry, MenuItem } from "@/types";
import EntryLayout from "@components/docs/EntryLayout.astro";
import CollectionLayout from "@components/docs/CollectionLayout.astro";
import { getEntries, getEntriesInGroup, getGroups } from "@lib/contentParser";
import { sortByTitle } from "@lib/sortFunctions";
import { getCollection as getAstroCollection } from 'astro:content';

// Usar "en" directamente ya que estamos en la carpeta /en/docs/
const lang = "en";

export async function getStaticPaths() {
  try {
    // Usar getEntries para obtener las entradas ya procesadas
    const entries = (await getEntries("docs", "en", sortByTitle, false, true)) as DocsEntry[];
    const paths = [];
    
    // Procesar cada entrada
    for (const entry of entries) {
      const segments = entry.id.split('/');
      
      // La estructura debe ser: lang/collection/...
      if (segments.length >= 3 && segments[0] === 'en' && segments[1] === 'docs') {
        // Es un grupo (ej: en/docs/characters)
        if (segments.length === 3 || (segments.length === 4 && entry.id.endsWith('-index'))) {
          const groupSlug = segments[2];
          paths.push({
            params: { id: groupSlug },
            props: { 
              entry: {
                ...entry,
                id: `en/docs/${groupSlug}`
              }, 
              isGroup: true 
            },
          });
        } 
        // Es un documento dentro de un grupo (ej: en/docs/characters/hero)
        else if (segments.length === 4 || (segments.length === 5 && entry.id.endsWith('-index'))) {
          const groupSlug = segments[2];
          const docSlug = segments[3].replace('-index', '');
          paths.push({
            params: { id: `${groupSlug}/${docSlug}` },
            props: { 
              entry: {
                ...entry,
                id: `en/docs/${groupSlug}/${docSlug}`
              },
              isGroup: false 
            },
          });
        }
      }
    }

    return paths;
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

const { entry, isGroup } = Astro.props;
const segments = entry.id.split("/");
// El nombre del grupo está en el tercer segmento (índice 2) para /en/docs/characters
const groupName = segments[2];

let groupEntries: DocsEntry[] = [];
if (isGroup) {
  groupEntries = (await getEntriesInGroup("docs", lang, groupName, sortByTitle)) as DocsEntry[];
}

// Construir menú del navegador
const browserMenu: MenuItem[] = [];
const groups = (await getGroups("docs", lang, sortByTitle)) as DocsEntry[];

for (const group of groups) {
  const groupSlug = group.id.split('/').pop() || '';
  
  const groupEntries = (await getEntriesInGroup(
    "docs",
    lang,
    groupSlug,
    sortByTitle
  )) as DocsEntry[];
  
  browserMenu.push({
    title: group.data.title,
    id: groupSlug,
    children: groupEntries.map((entry) => ({
      title: entry.data.title,
      id: entry.id.split('/').pop() || '',
      children: [],
    })),
  });
}
---

{
  isGroup ? (
    <CollectionLayout collectionIndex={entry} entries={groupEntries} />
  ) : (
    <EntryLayout entry={entry} browserMenu={browserMenu} />
  )
}
