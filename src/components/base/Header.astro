---
import ThemeSwitcher from "@components/base/ThemeSwitcher.astro";
import LanguageSwitcher from "@components/base/LanguageSwitcher.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import { languages, ui } from "@i18n/ui";
import { IoSearch } from "react-icons/io5";
import { getRelativeLocaleUrl } from "astro:i18n";

interface MenuItem {
  name: string;
  url: string;
  key: string;
}

const { stickyHeader = true, lang } = Astro.props;
const t = useTranslations(lang);
const locales = Object.keys(languages);

const pathname = Astro.url.pathname;

const menu: MenuItem[] = [
  {
    name: t("nav.home"),
    url: getRelativeLocaleUrl(lang, "/"),
    key: "nav.home",
  },
  {
    name: t("nav.about"),
    url: getRelativeLocaleUrl(lang, "/about"),
    key: "nav.about",
  },
  {
    name: t("nav.docs"),
    url: getRelativeLocaleUrl(lang, "/docs"),
    key: "nav.docs",
  },
  {
    name: t("nav.blog"),
    url: getRelativeLocaleUrl(lang, "/blog"),
    key: "nav.blog",
  },
  {
    name: t("nav.recipes"),
    url: getRelativeLocaleUrl(lang, "/recipes"),
    key: "nav.recipes",
  },
  {
    name: t("nav.poetry"),
    url: getRelativeLocaleUrl(lang, "/poetry"),
    key: "nav.poetry",
  },
  {
    name: t("nav.index-cards"),
    url: getRelativeLocaleUrl(lang, "/index-cards"),
    key: "nav.index-cards",
  },
  {
    name: t("nav.authors"),
    url: getRelativeLocaleUrl(lang, "/authors"),
    key: "nav.authors",
  },
  {
    name: t("nav.portfolio"),
    url: getRelativeLocaleUrl(lang, "/portfolio"),
    key: "nav.portfolio",
  },
];
---

<header
  transition:persist-props
  class={`container glass py-2 z-30 mb-4 lg:mt-4 lg:rounded-lg ${stickyHeader && "sticky top-0"}`}
>
  <nav class="relative flex flex-wrap items-center justify-between" x-data="{ open: false }">
    <!-- navbar toggler -->
    <button
      @click="open = !open"
      class="order-0 cursor-pointer flex items-center lg:hidden text-txt-p dark:text-darkmode-txt-p"
    >
      <svg x-show="!open" id="show-button" class="h-6 fill-current block" viewBox="0 0 20 20">
        <title>{t("header.menu.open")}</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
      <svg
        x-show="open"
        id="hide-button"
        class="h-6 fill-current"
        viewBox="0 0 20 20"
        style="display: none;"
      >
        <title>{t("header.menu.close")}</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </button>
    <!-- /navbar toggler -->
    <!-- Mobile Menu -->
    <ul
      id="nav-menu-mobile"
      @click.away="open = false"
      x-show="open"
      x-transition:enter="transition ease-out duration-100"
      x-transition:enter-start="transform opacity-0 scale-95"
      x-transition:enter-end="transform opacity-100 scale-100"
      x-transition:leave="transition ease-in duration-75"
      x-transition:leave-start="transform opacity-100 scale-100"
      x-transition:leave-end="transform opacity-0 scale-95"
      class="text-center order-3 w-full pb-6 lg:hidden"
      style="display: none;"
    >
      {
        menu.map((item) => {
          const currentPath = pathname.endsWith("/") ? pathname.slice(0, -1) : pathname;
          const itemPath = item.url.endsWith("/") ? item.url.slice(0, -1) : item.url;
          const isActive =
            currentPath === itemPath ||
            (itemPath !== "/" && currentPath.startsWith(`${itemPath}/`));

          return (
            <li @click="open = false">
              <a
                href={item.url}
                class={`block p-2 font-secondary font-semibold text-txt-p transition dark:text-darkmode-txt-p ${
                  isActive ? "active" : ""
                }`}
              >
                {item.name}
              </a>
            </li>
          );
        })
      }
    </ul>

    <!-- Desktop Menu -->
    <ul
      id="nav-menu-desktop"
      class="text-center lg:text-left order-1 w-auto pb-0 space-x-2 xl:space-x-4 hidden lg:flex"
    >
      {
        menu.map((item) => {
          const currentPath = pathname.endsWith("/") ? pathname.slice(0, -1) : pathname;
          const itemPath = item.url.endsWith("/") ? item.url.slice(0, -1) : item.url;
          const isActive =
            currentPath === itemPath ||
            (itemPath !== "/" && currentPath.startsWith(`${itemPath}/`));

          return (
            <li>
              <a
                href={item.url}
                class={`block p-2 font-secondary font-semibold text-txt-p transition dark:text-darkmode-txt-p lg:text-sm lg:px-2 xl:text-base ${
                  isActive ? "active" : ""
                }`}
              >
                {item.name}
              </a>
            </li>
          );
        })
      }
    </ul>
    <div class="order-1 ml-auto flex items-center md:order-2 lg:ml-0 space-x-1.5">
      <a
        class="p-2 text-txt-p hover:text-primary-500 dark:text-darkmode-txt-p dark:hover:text-primary-400"
        href={getRelativeLocaleUrl(lang, "/search/")}
        aria-label="Search"
      >
        <IoSearch className="h-5 w-5 md:h-4 md:w-4 lg:h-5 lg:w-5" />
      </a>
      <LanguageSwitcher />
      <ThemeSwitcher />
    </div>
  </nav>
</header>
