---
import { getRelativeLocaleUrl } from "astro:i18n";

interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;

// Configuración de idiomas
const locales = ['en', 'es'] as const;
type Locale = typeof locales[number];

// Nombres de los idiomas
const languageNames: Record<Locale, string> = {
  en: "English",
  es: "Español",
};

// Obtener el idioma actual de la URL
const getCurrentLang = (): Locale => {
  const langFromPath = Astro.url.pathname.split('/')[1];
  return locales.includes(langFromPath as Locale) ? (langFromPath as Locale) : 'en';
};

const currentLang = getCurrentLang();

// Obtener la ruta actual sin el prefijo de idioma
const getPathWithoutLang = () => {
  let path = Astro.url.pathname;
  for (const locale of locales) {
    const prefix = `/${locale}`;
    if (path.startsWith(prefix)) {
      return path.slice(prefix.length) || '/';
    }
  }
  return path;
};

const currentPath = getPathWithoutLang();

// Script para manejar la actualización del botón
const script = `
  function updateLanguageButton() {
    const path = window.location.pathname;
    const lang = path.startsWith('/es') ? 'es' : 'en';
    const buttons = document.querySelectorAll('.language-button-text');
    buttons.forEach(button => {
      button.textContent = { en: 'English', es: 'Español' }[lang];
    });
  }

  // Actualizar al cargar la página
  document.addEventListener('astro:page-load', updateLanguageButton);
  
  // También actualizar después de la navegación
  document.addEventListener('astro:after-swap', updateLanguageButton);
`;
---

<div class={`relative inline-block text-left ${className}`} x-data="{ open: false }">
  <div>
    <button
      type="button"
      class="inline-flex items-center justify-center w-full px-3 py-2 text-sm font-medium text-txt-p dark:text-darkmode-txt-p hover:bg-bg-s dark:hover:bg-darkmode-bg-s rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
      @click="open = !open"
      @keydown.escape="open = false"
      :aria-expanded="open"
      aria-haspopup="true"
    >
      <span class="font-medium language-button-text">{languageNames[currentLang]}</span>
      <script is:inline>{script}</script>
      <svg
        class="w-4 h-4 ml-1 transition-transform duration-200"
        :class="{ 'rotate-180': open }"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"
        ></path>
      </svg>
    </button>
  </div>

  <div
    x-show="open"
    @click.away="open = false"
    x-transition:enter="transition ease-out duration-100"
    x-transition:enter-start="transform opacity-0 scale-95"
    x-transition:enter-end="transform opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="transform opacity-100 scale-100"
    x-transition:leave-end="transform opacity-0 scale-95"
    class="absolute right-0 z-50 w-40 mt-2 origin-top-right bg-bg-p dark:bg-darkmode-bg-p rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    x-cloak
  >
    <div class="py-1" role="none">
      {
        locales.map((locale) => {
          // Generar la URL con el nuevo idioma
          const url = `/${locale}${currentPath}`;
          
          return (
            <a
              href={url}
              class={`block px-4 py-2 text-sm language-switcher-option ${
                currentLang === locale
                  ? "bg-bg-s dark:bg-darkmode-bg-s text-primary-600 dark:text-primary-400 font-medium"
                  : "text-txt-p dark:text-darkmode-txt-p hover:bg-bg-s dark:hover:bg-darkmode-bg-s"
              }`}
              role="menuitem"
              @click="open = false"
            >
              {languageNames[locale]}
            </a>
          );
        })
      }
    </div>
  </div>
</div>
