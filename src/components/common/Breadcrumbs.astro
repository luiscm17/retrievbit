---
import { lowerHumanize } from "@lib/textConverter";
import { getRelativeLocaleUrl } from 'astro:i18n';

const { className }: { className?: string } = Astro.props;

const lang = Astro.url.pathname.split('/')[1] || 'en';
const pathSegments = Astro.url.pathname.split("/").filter((x) => x).slice(1); // Remove lang prefix

let parts = [
  {
    label: "Home",
    href: getRelativeLocaleUrl(lang, ''), // Link to the language-specific home
    "aria-label": pathSegments.length === 0 ? "page" : undefined,
  },
];

pathSegments.forEach((label: string, i: number) => {
  // Rebuild the path without the language prefix
  const relativePath = pathSegments.slice(0, i + 1).join("/");
  const href = getRelativeLocaleUrl(lang, relativePath);
  
  parts.push({
    label: lowerHumanize(label.replace(/[-_]/g, " ")) || "",
    href,
    "aria-label": Astro.url.pathname === href ? "page" : undefined,
  });
});
---

<nav aria-label="Breadcrumb" class={className}>
  <ol class="inline-flex" role="list">
    {
      parts.map(({ label, ...attrs }, index) => (
        <li class="mx-1 capitalize" role="listitem">
          {index > 0 && <span class="inlin-block mr-1">/</span>}
          {index !== parts.length - 1 ? (
            <a class="text-txt-p dark:text-darkmode-txt-p" {...attrs}>
              {label}
            </a>
          ) : (
            <span class="text-txt-light dark:text-darkmode-txt-light">{label}</span>
          )}
        </li>
      ))
    }
  </ol>
</nav>
