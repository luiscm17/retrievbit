---
import { lowerHumanize } from "@lib/textConverter";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@i18n/utils";

const { className }: { className?: string } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const pathSegments = Astro.url.pathname
  .split("/")
  .filter((x) => x)
  .slice(1); // Remove lang prefix

const getTranslatedLabel = (segment: string): string => {
  const directTranslations: Record<string, string> = {
    blog: t("nav.blog") || "Blog",
    training: t("nav.training") || "Training",
    categories: t("blog.categories") || "Categories",
    tags: t("blog.tags") || "Tags",
    page: t("blog.page") || "Page",
    tutorials: t("nav.tutorials") || "Tutorials",
    concepts: t("nav.concepts") || "Concepts",
    authors: t("nav.authors") || "Authors",
    portfolio: t("nav.portfolio") || "Portfolio",
    indexCards: t("nav.index-cards") || "Index Cards",
    geology: t("training.geology") || "Geology",
    drilling: t("training.drilling") || "Drilling",
    production: t("training.production") || "Production",
    datascience: t("training.datascience") || "Data Science",
    intelligence: t("training.intelligence") || "Artificial Intelligence",
    reservoir: t("training.reservoir") || "Reservoir",
    terms: t("footer.terms") || "Terms & Conditions",
  };

  // Si hay una traducciÃ³n directa, la usamos
  if (directTranslations[segment.toLowerCase()]) {
    return directTranslations[segment.toLowerCase()];
  }

  // Si no, usamos lowerHumanize
  return lowerHumanize(segment.replace(/[-_]/g, " ")) || segment;
};

let parts: { label: string; href: string; "aria-label": string | undefined }[] = [
  {
    label: t("nav.home"),
    href: getRelativeLocaleUrl(lang, ""), // Link to the language-specific home
    "aria-label": pathSegments.length === 0 ? "page" : undefined,
  },
];

pathSegments.forEach((label: string, i: number) => {
  // Rebuild the path without the language prefix
  const relativePath = pathSegments.slice(0, i + 1).join("/");
  const href = getRelativeLocaleUrl(lang, relativePath);

  parts.push({
    label: getTranslatedLabel(label),
    href,
    "aria-label": Astro.url.pathname === href ? "page" : undefined,
  });
});
---

<nav aria-label="Breadcrumb" class={className}>
  <ol class="inline-flex" role="list">
    {
      parts.map(({ label, ...attrs }, index) => (
        <li class="mx-1 capitalize" role="listitem">
          {index > 0 && <span class="inlin-block mr-1">/</span>}
          {index !== parts.length - 1 ? (
            <a class="text-txt-p dark:text-darkmode-txt-p" {...attrs}>
              {label}
            </a>
          ) : (
            <span class="text-txt-light dark:text-darkmode-txt-light">{label}</span>
          )}
        </li>
      ))
    }
  </ol>
</nav>
